<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Frolian's blog</title><link href="http://flothesof.github.io/" rel="alternate"></link><link href="http://flothesof.github.io/feeds/florian-le-bourdais.atom.xml" rel="self"></link><id>http://flothesof.github.io/</id><updated>2016-01-06T18:12:00+01:00</updated><entry><title>L'âge moyen des députés français</title><link href="http://flothesof.github.io/age-moyen-deputes-francais.html" rel="alternate"></link><updated>2016-01-06T18:12:00+01:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2016-01-06:age-moyen-deputes-francais.html</id><summary type="html">&lt;p&gt;Dans ce billet, nous calculons l'âge du député français moyen à partir des données disponibles sur le site de l'assemblée nationale. Nous utilisons ensuite des données de l'INSEE pour évaluer la représentation des différentes classes d'âge françaises par les députés.&lt;/p&gt;</summary><category term="France"></category><category term="Démocratie"></category></entry><entry><title>L'algorithme du radoteur</title><link href="http://flothesof.github.io/algorithme-du-radoteur.html" rel="alternate"></link><updated>2015-12-30T12:02:00+01:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-12-30:algorithme-du-radoteur.html</id><summary type="html">&lt;p&gt;Dans ce post, nous nous intéressons à l'algorithme du radoteur, inventé par Roland Moreno et proposons une implémentation de cet algorithme en Python.&lt;/p&gt;</summary><category term="French"></category><category term="Language"></category></entry><entry><title>Autodeploying this blog with Travis</title><link href="http://flothesof.github.io/autodeploy-with-Travis.html" rel="alternate"></link><updated>2015-12-22T14:46:00+01:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-12-22:autodeploy-with-Travis.html</id><summary type="html">&lt;p&gt;In this post, I explain how I got Travis-CI to work with this blog.&lt;/p&gt;</summary><category term="Pelican"></category><category term="Travis-CI"></category></entry><entry><title>On the use of windows in digital signal processing</title><link href="http://flothesof.github.io/FFT-window-properties-frequency-analysis.html" rel="alternate"></link><updated>2015-10-29T19:28:00+01:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-10-29:FFT-window-properties-frequency-analysis.html</id><summary type="html">&lt;p&gt;Ever wondered what happens when you window a signal before computing a FFT? Hamming, boxcar, Blackman anyone? In this post, we're looking at all these windows from a fresh point of view and detail some of their applications to signal analysis.&lt;/p&gt;</summary><category term="Digital Signal Processing"></category><category term="Music"></category><category term="Coursera"></category></entry><entry><title>How do balls bounce?</title><link href="http://flothesof.github.io/bouncing-balls.html" rel="alternate"></link><updated>2015-10-04T19:14:00+02:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-10-04:bouncing-balls.html</id><summary type="html">&lt;p&gt;In this notebook, we'll go to the bottom of a thought that occured to me during a recent Lindy Hop class.&lt;/p&gt;</summary><category term="Physics"></category><category term="Gravity"></category></entry><entry><title>Installing sms-tools under Mac OS X and Anaconda</title><link href="http://flothesof.github.io/sms-tools-MacOSX-Anaconda.html" rel="alternate"></link><updated>2015-09-28T22:42:00+02:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-09-28:sms-tools-MacOSX-Anaconda.html</id><summary type="html">&lt;p&gt;This post is dedicated to installing the sms-tools software suite using a virtual environment made with Anaconda under Mac OS X.&lt;/p&gt;</summary><category term="Anaconda"></category><category term="Coursera"></category><category term="Mac OS X"></category></entry><entry><title>Building a PyQt application to record your microphone and plot its spectrum</title><link href="http://flothesof.github.io/pyqt-microphone-fft-application.html" rel="alternate"></link><updated>2015-07-21T19:12:00+02:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-07-21:pyqt-microphone-fft-application.html</id><summary type="html">&lt;p&gt;In this post, in explain how to build a PyQt application that to record input from your microphone and plots it in real time, including the associated spectrum, using PyAudio, matplotlib and numpy.&lt;/p&gt;</summary><category term="Physics"></category><category term="PyQt"></category></entry><entry><title>Implementing the k-means algorithm with numpy</title><link href="http://flothesof.github.io/k-means-numpy.html" rel="alternate"></link><updated>2015-07-17T21:39:00+02:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-07-17:k-means-numpy.html</id><summary type="html">&lt;p&gt;In this post, we examine a pure numpy implementation of the k-means algorithm and animate its convergence on an example dataset.&lt;/p&gt;</summary><category term="Mathematics"></category><category term="Machine Learning"></category></entry><entry><title>The Farthest Neighbors Algorithm</title><link href="http://flothesof.github.io/farthest-neighbors.html" rel="alternate"></link><updated>2015-07-16T23:59:00+02:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-07-16:farthest-neighbors.html</id><summary type="html">&lt;p&gt;In this notebook, we take a look at the farthest neighbors algorithm, in the fashion of Peter Norvig.&lt;/p&gt;</summary><category term="Mathematics"></category></entry><entry><title>Exploring Japanese characters with principal component analysis</title><link href="http://flothesof.github.io/Japanese-characters-principal-components.html" rel="alternate"></link><updated>2015-04-17T22:36:00+02:00</updated><author><name>Florian Le Bourdais</name></author><id>tag:flothesof.github.io,2015-04-17:Japanese-characters-principal-components.html</id><summary type="html">&lt;p&gt;What if you apply a machine learning technique such as principal component analysis to the mysterious Japanese characters? Will it reveal their secret structure or just make for a fancy blogpost?&lt;/p&gt;</summary><category term="Japanese"></category><category term="Machine Learning"></category></entry></feed>